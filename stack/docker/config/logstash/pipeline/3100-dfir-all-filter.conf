# CYBERHUNTER DFIR collection: dfir filter file
# Description: we use this file to tag different dfir collected artifacts based on their field combinations
# Author: Diego Perez (@darkquassar)
# License: GPL-3.0

filter {

  if [log_src_pipeline] == "cyberhunter" {
    
    # UsnJournal
    # Let's create and "AND" combination to determine wether this log comes from 
    # the use of MFTECmd.
    if [Name] and [Extension] and [EntryNumber] and [SequenceNumber] and [ParentEntryNumber] and [ParentSequenceNumber] and [UpdateSequenceNumber] and [UpdateTimestamp] and [UpdateReasons] and [FileAttributes] and [OffsetToData] and [SourceFile] {
      mutate {
        add_field => {
          # for the log_name field we use "system-collectorsystem-logtype-logsubtype"
          "log_name" => "windows-kape-usnjournal"
          "[@metadata][dfir_collection]" => "yes"
          "z_logstash_pipeline" => "3100-usnjournal" 
        }
      }
      
      date {
        timezone => "UTC"
        match => [ "UpdateTimestamp", "yyyy-MM-dd HH:mm:ss.SSSSSSS" ]
        target => "@timestamp"
        tag_on_failure => [ "_dfir_usnjournal_dateparsefailure" ]
      }

    }

    # MFT
    # Let's create and "AND" combination to determine wether this log comes from 
    # the use of "MFTECmd.exe".
    if [EntryNumber] and [Extension] and [FileName] and [FileSize] and [InUse] and [SequenceNumber] and [ParentEntryNumber] and [ParentSequenceNumber] and [ParentPath] and [IsDirectory] and [HasAds] and [IsAds] and [SiFlags] and [NameType] and [UpdateSequenceNumber] {
      mutate {
        add_field => {
          "log_name" => "windows-kape-mft"
          "[@metadata][dfir_collection]" => "yes"
          "z_logstash_pipeline" => "3100-mft" 
        }
      }

      date {
        timezone => "UTC"
        match => [ "LastRecordChange0x10", "yyyy-MM-dd HH:mm:ss.SSSSSSS" ]
        target => "@timestamp"
        tag_on_failure => [ "_dfir_mft_dateparsefailure" ]
      }
      
    }

    # RecycleBin
    # Let's create and "AND" combination to determine wether this log comes from 
    # the use of "RBCmd.exe".
    if [SourceName]	and [FileType] and [FileName] and	[FileSize] and [DeletedOn] {
      mutate { 
        add_field => {
          "log_name" => "windows-kape-recyclebin"
          "[@metadata][dfir_collection]" => "yes"
          "z_logstash_pipeline" => "3100-recyclebin" 
        }
      }

      date {
        timezone => "UTC"
        match => [ "DeletedOn", "yyyy-MM-dd HH:mm:ss.SSSSSSS" ]
        target => "@timestamp"
        tag_on_failure => [ "_dfir_recyclebin_dateparsefailure" ]
      }

    }

    # AppCompatCache
    # Let's create and "AND" combination to determine wether this log comes from 
    # the use of Eric Zimmerman "AppCompatCacheParser.exe".
    if [SourceFilename] and [SourceCreated] and [SourceModified] and [SourceAccessed] and [ExecutableName] and [Hash] and [Size] and [Version] and [RunCount] and [LastRun] and [FilesLoaded] {
      mutate {
        add_field => {
          "log_name" => "windows-kape-appcompatcache"
          "[@metadata][dfir_collection]" => "yes"
          "z_logstash_pipeline" => "3100-appcompatcache" 
        }
      }

      date {
        timezone => "UTC"
        match => [ "LastRun", "yyyy-MM-dd HH:mm:ss" ]
        target => "@timestamp"
        tag_on_failure => [ "_dfir_appcompatcache_dateparsefailure" ]
      }

    }
    
  }
}